// Copyright (c) Microsoft. All rights reserved.

using System.Net;
using System;
using Helpers.Http;
using Xunit;
using Newtonsoft.Json.Linq;

namespace IoTHubManager
{
    public class CreateDeviceTest
    {
        private readonly IHttpClient httpClient;
        private const string IOTHUB_ADDRESS = "http://localhost:9002/v1";
        private const string DEVICES_DIR = "./devices/";
        private string DEVICE_TEMPLATE_AUTO_GEN_AUTH;

        public CreateDeviceTest()
        {
            this.httpClient = new HttpClient();
            DEVICE_TEMPLATE_AUTO_GEN_AUTH = System.IO.File.ReadAllText(DEVICES_DIR+"Device_Template_Auto_Generated_Auth.json");//"{\"Id\": \"{DeviceId}\", \"IsSimulated\": false, \"Enabled\": true, \"Authentication\": {}}"
        }

        /// <summary>
        /// Integration test using a real HTTP instance.
        /// Test that the service starts normally and returns ok status
        /// </summary>
        [Fact, Trait("Type", "IntegrationTest")]
        public void Creates_DevicewithAutoGeneratedIdAndAuth_FailsOn_EmptyIdOrAuth()
        {
            // DeviceId must be empty to be auto generated.
            var device = DEVICE_TEMPLATE_AUTO_GEN_AUTH.Replace("{DeviceId}","");
            var response = this.request(device);

            // Asserts
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);

            var createdDevice = JObject.Parse(response.Content);

            var authentication = createdDevice["Authentication"];
            var createdDeviceId = createdDevice["Id"].ToString();

            Assert.False(string.IsNullOrEmpty(createdDeviceId));
            Assert.Equal("false", createdDevice["IsSimulated"]);

            var primaryKey = authentication["PrimaryKey"].ToString();
            var secondaryKey = authentication["SecondaryKey"].ToString();

            Assert.Equal(0, authentication["AuthenticationType"]);
            Assert.False(string.IsNullOrEmpty(primaryKey));
            Assert.False(string.IsNullOrEmpty(secondaryKey));
            
        }
        [Fact, Trait("Type", "IntegrationTest")]
        public void Creates_DevicewithCustomIdAndAutoAuth_FailsOn_IncorrectIdOrMissingAuth()
        {
            // DeviceId must be empty to be auto generated.
            var id = Guid.NewGuid().ToString();
            var device = DEVICE_TEMPLATE_AUTO_GEN_AUTH.Replace("{DeviceId}",id);
            var response = this.request(device);

            // Asserts
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);

            var createdDevice = JObject.Parse(response.Content);

            var authentication = createdDevice["Authentication"];
            string createdDeviceId = createdDevice["Id"].ToString();

            Assert.Equal(createdDeviceId, id);
            Assert.Equal("false", createdDevice["IsSimulated"]);

            string primaryKey = authentication["PrimaryKey"].ToString(),
                secondaryKey = authentication["SecondaryKey"].ToString();

            Assert.Equal(0, authentication["AuthenticationType"]);
            Assert.False(string.IsNullOrEmpty(primaryKey));
            Assert.False(string.IsNullOrEmpty(secondaryKey));
            
        }

        private IHttpResponse request(string content) {
            var request = new HttpRequest(IOTHUB_ADDRESS + "/devices");
            request.SetContent(content);
            return this.httpClient.PostAsync(request).Result;
        }
    }
}