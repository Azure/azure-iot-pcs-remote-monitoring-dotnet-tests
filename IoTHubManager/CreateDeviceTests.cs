// Copyright (c) Microsoft. All rights reserved.

using System.Net;
using System;
using System.Security.Cryptography;
using System.Text;
using Helpers.Http;
using Xunit;
using Newtonsoft.Json.Linq;

namespace IoTHubManager
{
    public class CreateDeviceTest
    {
        private const string DEVICES_DIR = "./resources/devices/";

        internal HttpRequestWrapper Request;

        private string DEVICE_TEMPLATE_AUTO_GEN_AUTH, 
                       DEVICE_TEMPLATE_SYMMETRIC_AUTH,
                       DEVICE_TEMPLATE_X509_AUTH;

        public CreateDeviceTest()
        {
            this.Request = new HttpRequestWrapper(Constants.Urls.IOTHUB_ADDRESS, Constants.Urls.DEVICE_PATH);

            DEVICE_TEMPLATE_AUTO_GEN_AUTH = System.IO.File.ReadAllText(Constants.Path.DEVICE_FILE_AUTO_GEN_AUTH);
            DEVICE_TEMPLATE_SYMMETRIC_AUTH = System.IO.File.ReadAllText(Constants.Path.DEVICE_FILE_SYMMETRIC_AUTH);
            DEVICE_TEMPLATE_X509_AUTH = System.IO.File.ReadAllText(Constants.Path.DEVICE_FILE_X509_AUTH);
                                 
        }

        /// <summary>
        /// Integration test using a real HTTP instance.
        /// Tests for creation of devices with all permutation of AUTH and Id creation
        /// </summary>
        [Fact, Trait(Constants.TEST , Constants.INTEGRATION_TEST )]
        public void Creates_Device_with_AutoGenerated_Id_and_Auth()
        {
            // DeviceId must be empty to be auto generated.
            var device = DEVICE_TEMPLATE_AUTO_GEN_AUTH.Replace(Constants.TemplateKeys.DEVICE_ID, "");
            var response = Request.Post(device);

            // Asserts
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);

            var createdDevice = JObject.Parse(response.Content);

            var authentication = createdDevice["Authentication"];
            var createdDeviceId = createdDevice["Id"].ToString();

            Assert.False(string.IsNullOrEmpty(createdDeviceId));
            Assert.False(createdDevice["IsSimulated"].ToObject<bool>());
            Assert.True(createdDevice["Enabled"].ToObject<bool>());

            string primaryKey = authentication["PrimaryKey"].ToString(),
                   secondaryKey = authentication["SecondaryKey"].ToString();

            Assert.Equal(0, authentication["AuthenticationType"]);
            Assert.False(string.IsNullOrEmpty(primaryKey));
            Assert.False(string.IsNullOrEmpty(secondaryKey));
            
        }

        [Fact, Trait(Constants.TEST , Constants.INTEGRATION_TEST )]
        public void Creates_Device_with_Custom_Id_and_AutoGenerated_Auth()
        {
            // DeviceId must be empty to be auto generated.
            string id = Guid.NewGuid().ToString();
            var device = DEVICE_TEMPLATE_AUTO_GEN_AUTH.Replace(Constants.TemplateKeys.DEVICE_ID, id);
            var response = Request.Post(device);

            // Asserts
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);

            var createdDevice = JObject.Parse(response.Content);

            //Assert Device ID
            string createdDeviceId = createdDevice["Id"].ToString();
            Assert.Equal(createdDeviceId, id);

            //Assert Authentication
            var authentication = createdDevice["Authentication"];
            Assert.Equal(0, authentication["AuthenticationType"]);

            string primaryKey = authentication["PrimaryKey"].ToString(),
                   secondaryKey = authentication["SecondaryKey"].ToString();

            Assert.False(string.IsNullOrEmpty(primaryKey));
            Assert.False(string.IsNullOrEmpty(secondaryKey));

            //Assert other properties
            Assert.False(createdDevice["IsSimulated"].ToObject<bool>());
            Assert.True(createdDevice["Enabled"].ToObject<bool>());
            
        }


        [Fact, Trait(Constants.TEST , Constants.INTEGRATION_TEST )]
        public void Creates_Device_with_Custom_Id_and_Auth()
        {

            string id = Guid.NewGuid().ToString(),
                   primaryKey = Guid.NewGuid().ToString("n"),
                   secondaryKey = Guid.NewGuid().ToString("n");

            string device = DEVICE_TEMPLATE_SYMMETRIC_AUTH.Replace(Constants.TemplateKeys.DEVICE_ID, id)
                                                          .Replace("{PrimaryKey}",primaryKey)
                                                          .Replace("{SecondaryKey}",secondaryKey);
            var response = Request.Post(device);

            // Asserts
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);

            var createdDevice = JObject.Parse(response.Content);

            //Assert Device ID is NOT empty
            string createdDeviceId = createdDevice["Id"].ToString();
            Assert.Equal(createdDeviceId, id);

            //Assert Authentication
            var authentication = createdDevice["Authentication"];
            Assert.Equal(0, authentication["AuthenticationType"]);

            string createdPrimaryKey = authentication["PrimaryKey"].ToString(),
                   createdSecondaryKey = authentication["SecondaryKey"].ToString();

            Assert.Equal(primaryKey, createdPrimaryKey);
            Assert.Equal(secondaryKey, createdSecondaryKey);

            //Assert other properties
            Assert.False(createdDevice["IsSimulated"].ToObject<bool>());
            Assert.True(createdDevice["Enabled"].ToObject<bool>());
            
        }


        [Fact, Trait(Constants.TEST , Constants.INTEGRATION_TEST )]
        public void Creates_Device_with_AutoGen_Id_and_Custom_Auth()
        {
            string primaryKey = Guid.NewGuid().ToString("N"),
                   secondaryKey = Guid.NewGuid().ToString("N");
           
            string device = DEVICE_TEMPLATE_SYMMETRIC_AUTH.Replace(Constants.TemplateKeys.DEVICE_ID, "")
                                                          .Replace("{PrimaryKey}",primaryKey)
                                                          .Replace("{SecondaryKey}",secondaryKey);
            var response = Request.Post(device);

            // Asserts
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);

            var createdDevice = JObject.Parse(response.Content);

            //Assert Device ID is NOT empty
            string createdDeviceId = createdDevice["Id"].ToString();
            Assert.False(string.IsNullOrEmpty(createdDeviceId));

            //Assert Authentication
            var authentication = createdDevice["Authentication"];
            Assert.Equal(0, authentication["AuthenticationType"]);

            string createdPrimaryKey = authentication["PrimaryKey"].ToString(),
                   createdSecondaryKey = authentication["SecondaryKey"].ToString();

            Assert.Equal(primaryKey, createdPrimaryKey);
            Assert.Equal(secondaryKey, createdSecondaryKey);

            //Assert other properties
            Assert.False(createdDevice["IsSimulated"].ToObject<bool>());
            Assert.True(createdDevice["Enabled"].ToObject<bool>());
            
        }

        [Fact, Trait(Constants.TEST , Constants.INTEGRATION_TEST )]
        public void Creates_Device_with_Custom_Id_and_X509_Auth()
        {

            string id = Guid.NewGuid().ToString(),
                   primaryThumbprint = generateNewThumbPrint(),
                   secondaryThumbprint = generateNewThumbPrint();

            string device = DEVICE_TEMPLATE_X509_AUTH.Replace(Constants.TemplateKeys.DEVICE_ID, id)
                                                     .Replace(Constants.TemplateKeys.PRIMARY_TH, primaryThumbprint)
                                                     .Replace(Constants.TemplateKeys.SECONDARY_TH, secondaryThumbprint);
            var response = Request.Post(device);

            //Assert Request success (200 OK)
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            //Parsing JSON
            var createdDevice = JObject.Parse(response.Content);


            //Assert Device ID is NOT empty
            string createdDeviceId = createdDevice["Id"].ToString();
            Assert.Equal(createdDeviceId, id);


            //Assert Authentication
            var authentication = createdDevice["Authentication"];
            Assert.Equal(1, authentication["AuthenticationType"]);

            string createdPrimaryThumbprint = authentication["PrimaryThumbprint"].ToString(),
                   createdSecondaryThumbprint = authentication["SecondaryThumbprint"].ToString();

            Assert.Equal(primaryThumbprint, createdPrimaryThumbprint);
            Assert.Equal(secondaryThumbprint, createdSecondaryThumbprint);


            //Assert other properties
            Assert.False(createdDevice["IsSimulated"].ToObject<bool>());
            Assert.True(createdDevice["Enabled"].ToObject<bool>());
            
        }


        [Fact, Trait(Constants.TEST , Constants.INTEGRATION_TEST )]
        public void Creates_Device_AutoGen_Id_and_Custom_X509_Auth()
        {
            string primaryThumbprint = generateNewThumbPrint(),
                   secondaryThumbprint = generateNewThumbPrint();
           
            string device = DEVICE_TEMPLATE_X509_AUTH.Replace(Constants.TemplateKeys.DEVICE_ID, "")
                                                     .Replace(Constants.TemplateKeys.PRIMARY_TH,primaryThumbprint)
                                                     .Replace(Constants.TemplateKeys.SECONDARY_TH,secondaryThumbprint);
            var response = Request.Post(device);
            

            // Asserts
            //Assert Request success (200 OK)
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            //Parsing JSON
            var createdDevice = JObject.Parse(response.Content);


            //Assert Device ID is NOT empty
            string createdDeviceId = createdDevice["Id"].ToString();
            Assert.False(string.IsNullOrEmpty(createdDeviceId));


            //Assert Authentication
            var authentication = createdDevice["Authentication"];
            Assert.Equal(1, authentication["AuthenticationType"]);

            string createdPrimaryThumbprint = authentication["PrimaryThumbprint"].ToString(),
                   createdSecondaryThumbprint = authentication["SecondaryThumbprint"].ToString();

            Assert.Equal(primaryThumbprint, createdPrimaryThumbprint);
            Assert.Equal(secondaryThumbprint, createdSecondaryThumbprint);


            //Assert other properties
            Assert.False(createdDevice["IsSimulated"].ToObject<bool>());
            Assert.True(createdDevice["Enabled"].ToObject<bool>());
            
        }

        /*
        Generates random SHA1 hash mimicing the X509 thumb print
         */
        private string generateNewThumbPrint(){
           
            string input = Guid.NewGuid().ToString();
            SHA1Managed sha = new SHA1Managed();

            var hash = sha.ComputeHash(Encoding.UTF8.GetBytes(input));
            var stringBuilder = new StringBuilder(hash.Length * 2);

            for (int i = 0; i < hash.Length; i++)
            {
                stringBuilder.Append(hash[i].ToString("X2"));
            }

            return stringBuilder.ToString();
        }
    }
}